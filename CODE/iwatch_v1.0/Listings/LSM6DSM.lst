C51 COMPILER V9.52.0.0   LSM6DSM                                                           08/02/2021 23:10:22 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE LSM6DSM
OBJECT MODULE PLACED IN ..\Objects\LSM6DSM.obj
COMPILER INVOKED BY: E:\install_files\keil\C51\BIN\C51.EXE ..\User\sensor\LSM6DSM.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDI
                    -R(..\User\oled;..\User\rtc;..\User\System;..\User;..\User\bluetooth;..\User\radio;..\User\sensor) DEBUG OBJECTEXTEND PRI
                    -NT(..\Listings\LSM6DSM.lst) TABS(2) OBJECT(..\Objects\LSM6DSM.obj)

line level    source

   1          #include "stc8a.h"
   2          #include "IIC.h"
   3          #include "Delay.h"
   4          #include "LSM6DSM.h"
   5          #include "math.h"
   6          
   7          void LSM6DSMWriteByte(unsigned char addr, unsigned char dat)
   8          {
   9   1        Single_WriteIIC(LSM6DSM_IIC_ADDR, addr, dat);
  10   1      }
  11          unsigned char LSM6DSMReadByte(unsigned char addr)
  12          {
  13   1        unsigned char temp;
  14   1        temp = Single_ReadIIC(LSM6DSM_IIC_ADDR, addr);
  15   1        return temp;
  16   1      }
  17          void LSM6DSMRSetRegisterBits(unsigned char addr, unsigned char dat, unsigned char SC)
  18          {
  19   1        unsigned char temp;
  20   1        temp = LSM6DSMReadByte(addr);
  21   1        if(SC == 1)
  22   1          temp |= dat;
  23   1        else if(SC == 0)
  24   1          temp &= ~dat;
  25   1        LSM6DSMWriteByte(addr, temp);
  26   1      }
  27          unsigned char LSM6DSMCheckConnection()
  28          {
  29   1        unsigned char temp;
  30   1        temp = LSM6DSMReadByte(WHO_AM_I);
  31   1        if(temp == 0x6a)
  32   1          return 1;
  33   1        else
  34   1          return 0;
  35   1      }
  36          void LSM6DSMConfigAcc(unsigned char acc_odr, unsigned char acc_scale)
  37          {
  38   1        LSM6DSMWriteByte(CTRL1_XL, acc_odr | acc_scale);
  39   1      }
  40          void LSM6DSMConfigGyr(unsigned char gyr_odr, unsigned char gyr_scale)
  41          {
  42   1        LSM6DSMWriteByte(CTRL2_G, gyr_odr | gyr_scale);
  43   1      }
  44          void LSM6DSMReadGYRAndACC(struct lsm6dsm_data *p)
  45          {
  46   1        unsigned char buf[12];
  47   1        I2C_Read_MultiBytes(LSM6DSM_IIC_ADDR, OUTX_L_G, 12, buf);
  48   1        //gyr
  49   1        p->gyr_x = (buf[1] << 8) | buf[0];// / 65.536;
  50   1        p->gyr_y = (buf[3] << 8) | buf[2];// / 65.536;
  51   1        p->gyr_z = (buf[5] << 8) | buf[4];// / 65.536;
  52   1        //acc
  53   1        p->acc_x = (buf[7] << 8) | buf[6];// / 8192.0;
C51 COMPILER V9.52.0.0   LSM6DSM                                                           08/02/2021 23:10:22 PAGE 2   

  54   1        p->acc_y = (buf[9] << 8) | buf[8];// / 8192.0;
  55   1        p->acc_z = (buf[11] << 8) | buf[10];// / 8192.0;
  56   1      }
  57          /*
  58          int LSM6DSMReadTemperature(void)
  59          {
  60            unsigned char buf[2];
  61            int temp;
  62            I2C_Read_MultiBytes(LSM6DSM_IIC_ADDR, OUT_TEMP_L, 2, buf);
  63            temp = (buf[1] << 8) | buf[0];
  64            return temp;
  65          }
  66          */
  67          void LSM6DSMSoftReset(void)
  68          {
  69   1        LSM6DSMRSetRegisterBits(CTRL3_C, 0x01, 1);
  70   1        Delay1ms(50);
  71   1      }
  72          void LSM6DSMEnableEMbeddedFunc(void)
  73          {
  74   1        LSM6DSMRSetRegisterBits(CTRL10_C, 0x04, 1);   // Enable embedded functions
  75   1      }
  76          /*
  77          void LSM6DSMDisableEMbeddedFunc(void)
  78          {
  79            LSM6DSMRSetRegisterBits(CTRL10_C, 0x04, 0);   // Disable embedded functions
  80          }*/
  81          void LSM6DSMEnableAWT(int angle, int delay)
  82          {
  83   1        unsigned char set_delay;
  84   1        unsigned char set_angle;
  85   1        set_delay = (unsigned char)(delay / 40);
  86   1        set_angle = (unsigned char)(sin(angle * 3.1415926 / 180) * 64);
  87   1        if(set_delay > 0xff)
  88   1          set_delay = 0xff;
  89   1        if(set_angle > 0xff)
  90   1          set_angle = 0xff;
  91   1        LSM6DSMWriteByte(FUNC_CFG_ACCESS,   0xa0);        // Enable access to embedded registers (bank B) 
  92   1        LSM6DSMWriteByte(A_WRIST_TILT_LAT,  set_delay);   // Set new latency in A_WRIST_TILT_LAT 
  93   1        LSM6DSMWriteByte(A_WRIST_TILT_THS,  set_angle);   // Set new threshold in A_WRIST_TILT_THS 
  94   1        LSM6DSMWriteByte(A_WRIST_TILT_Mask, 0x20);        // Set new mask in A_WRIST_TILT_Mask 
  95   1        LSM6DSMWriteByte(FUNC_CFG_ACCESS,   0x00);        // Disable access to embedded registers (bank B) 
  96   1        LSM6DSMRSetRegisterBits(CTRL10_C, 0x80, 1);       // Enable embedded functions(0x04)
  97   1                                                          // Enable AWT detection (0x80)
  98   1        LSM6DSMRSetRegisterBits(DRDY_PULSE_CFG, 0x01, 1); // AWT interrupt driven to INT2 pin
  99   1      }
 100          /*
 101          void LSM6DSMDisableAWT(void)
 102          {
 103            LSM6DSMRSetRegisterBits(CTRL10_C, 0x80, 0);       // Disable AWT detection (0x80)
 104            LSM6DSMRSetRegisterBits(DRDY_PULSE_CFG, 0x01, 0); // AWT interrupt disconnect to INT2 pin
 105          }*/
 106          void LSM6DSMEnableTapDetection(void)
 107          {
 108   1        LSM6DSMRSetRegisterBits(TAP_CFG, 0x82, 1);    // Enable interrupts(0x80) and tap detection on X-axis(0x08),
             - Y-axis(0x04), Z-axis(0x02)
 109   1        LSM6DSMRSetRegisterBits(TAP_THS_6D, 0x8c, 1); // Set tap threshold(LSB0 - MSB4, dafult value 00000) 
 110   1        LSM6DSMWriteByte(INT_DUR2, 0x7f);             // Set Duration, Quiet and Shock time windows 
 111   1        LSM6DSMRSetRegisterBits(WAKE_UP_THS, 0x80, 1);// Single & double-tap enabled (0x80)SINGLE_DOUBLE_TAP = 1,
             - if = 0, SINGLE_TAP only)
 112   1        LSM6DSMRSetRegisterBits(MD1_CFG, 0x08, 1);    // (0x40)Single-tap interrupt driven to INT1 pin
 113   1                                                      // (0x08)Double-tap interrupt driven to INT1 pin
C51 COMPILER V9.52.0.0   LSM6DSM                                                           08/02/2021 23:10:22 PAGE 3   

 114   1        //LSM6DSMRSetRegisterBits(MD2_CFG, 0x08, 1);  // (0x40)Single-tap interrupt driven to INT2 pin
 115   1                                                      // (0x08)Double-tap interrupt driven to INT2 pin
 116   1      }
 117          /*
 118          void LSM6DSMDisableTapDetection(void)
 119          {
 120            LSM6DSMRSetRegisterBits(TAP_CFG, 0x08|0x04|0x02, 0);  //tap detection on X-axis(0x08), Y-axis(0x04), Z-axi
             -s(0x02)
 121          }
 122          */
 123          void LSM6DSMEnablePedometer(unsigned int debounce_time, unsigned char debounce_step)
 124          {
 125   1        LSM6DSMWriteByte(FUNC_CFG_ACCESS, 0x80);              // Enable access to embedded functions registers (bank A)
 126   1        LSM6DSMWriteByte(CONFIG_PEDO_THS_MIN, 0x8e);          // PEDO_FS = ¡À4 g and configure pedometer minimum thres
             -hold value
 127   1        LSM6DSMWriteByte(PEDO_DEB_REG, ((unsigned char)(debounce_time / 80) << 3) | (debounce_step & 0x07));
 128   1        LSM6DSMWriteByte(FUNC_CFG_ACCESS, 0x00);              // Disable access to embedded functions registers (bank A)
 129   1        LSM6DSMRSetRegisterBits(CTRL10_C, 0x10, 1);           // Enable embedded functions and pedometer algorithm
 130   1        //LSM6DSMRSetRegisterBits(INT1_CTRL, 0x80, 1);          // Step detector interrupt driven to INT1 pin
 131   1      }
 132          unsigned int LSM6DSMGetCurrentStep(void)
 133          {
 134   1        unsigned char tempL, tempH;
 135   1        tempL = LSM6DSMReadByte(STEP_COUNTER_L);
 136   1        tempH = LSM6DSMReadByte(STEP_COUNTER_H);
 137   1        return ((tempH << 8) | tempL);
 138   1      }
 139          void LSM6DSMResetStepCounter(void)
 140          {
 141   1        LSM6DSMRSetRegisterBits(CTRL10_C, 0x02, 1);
 142   1        Delay1ms(1);
 143   1        LSM6DSMRSetRegisterBits(CTRL10_C, 0x02, 0);
 144   1      }
 145          void LSM6DSMDisablePedometer(void)
 146          {
 147   1        LSM6DSMRSetRegisterBits(CTRL10_C, 0x10, 0);           // Disable pedometer algorithm
 148   1      }
 149          unsigned char LSM6DSMInit(void)
 150          {
 151   1        unsigned int time_out = 200;
 152   1        Delay1ms(50);
 153   1        while(LSM6DSMCheckConnection() == 0)
 154   1        {
 155   2          Delay1ms(1);
 156   2          if(--time_out == 0)
 157   2            return 0;
 158   2        }
 159   1        LSM6DSMSoftReset();
 160   1        LSM6DSMConfigAcc(ACC_ODR_416_HZ, ACC_SCALE_4_G);
 161   1        LSM6DSMConfigGyr(GYR_POWER_DOWN, GYR_SCALE_500_DPS);
 162   1        LSM6DSMEnableAWT(10, 100);              //20 degree, 400ms
 163   1        LSM6DSMEnableTapDetection();
 164   1        LSM6DSMEnablePedometer(1040, 6);        //debounce time = 1040ms, debounce step = 6 steps
 165   1        LSM6DSMEnableEMbeddedFunc();
 166   1        return 1;
 167   1      }
 168          /******************************×ËÌ¬½âËãÏà¹Ø************************************/
 169          #define pi    3.14159265f                           
 170          #define Kp    0.8f                        
 171          #define Ki    0.001f                         
 172          #define halfT 0.004f           
 173          float idata q0=1,q1=0,q2=0,q3=0;   
C51 COMPILER V9.52.0.0   LSM6DSM                                                           08/02/2021 23:10:22 PAGE 4   

 174          float idata exInt=0,eyInt=0,ezInt=0; 
 175          void IMUupdate(struct lsm6dsm_data *p)
 176          {
 177   1        float data norm;
 178   1        float idata ax, ay, az;
 179   1        float idata gx, gy, gz;
 180   1        float idata vx, vy, vz;
 181   1        float idata ex, ey, ez;
 182   1        
 183   1        ax = p->acc_x;
 184   1        ay = p->acc_y;
 185   1        az = p->acc_z;
 186   1        
 187   1        gx = p->gyr_x * 0.0174533f / 65.536;
 188   1        gy = p->gyr_y * 0.0174533f / 65.536;
 189   1        gz = p->gyr_z * 0.0174533f / 65.536;
 190   1      
 191   1        norm = sqrt(ax*ax + ay*ay + az*az); //°Ñ¼ÓËÙ¶È¼ÆµÄÈýÎ¬ÏòÁ¿×ª³Éµ¥Î¬ÏòÁ¿   
 192   1        ax = ax / norm;
 193   1        ay = ay / norm;
 194   1        az = az / norm;
 195   1      
 196   1          //  ÏÂÃæÊÇ°ÑËÄÔªÊý»»Ëã³É¡¶·½ÏòÓàÏÒ¾ØÕó¡·ÖÐµÄµÚÈýÁÐµÄÈý¸öÔªËØ¡£ 
 197   1          //  ¸ù¾ÝÓàÏÒ¾ØÕóºÍÅ·À­½ÇµÄ¶¨Òå£¬µØÀí×ø±êÏµµÄÖØÁ¦ÏòÁ¿£¬×ªµ½»úÌå×ø±êÏµ£¬ÕýºÃÊÇÕâÈý¸öÔªËØ
 198   1          //  ËùÒÔÕâÀïµÄvx vy vz£¬ÆäÊµ¾ÍÊÇµ±Ç°µÄÅ·À­½Ç£¨¼´ËÄÔªÊý£©µÄ»úÌå×ø±ê²ÎÕÕÏµÉÏ£¬»»Ëã³öÀ´µÄ
 199   1          //  ÖØÁ¦µ¥Î»ÏòÁ¿¡£
 200   1        vx = 2*(q1*q3 - q0*q2);
 201   1        vy = 2*(q0*q1 + q2*q3);
 202   1        vz = q0*q0 - q1*q1 - q2*q2 + q3*q3 ;
 203   1      
 204   1        ex = (ay*vz - az*vy) ;
 205   1        ey = (az*vx - ax*vz) ;
 206   1        ez = (ax*vy - ay*vx) ;
 207   1      
 208   1        exInt = exInt + ex * Ki;
 209   1        eyInt = eyInt + ey * Ki;
 210   1        ezInt = ezInt + ez * Ki;
 211   1      
 212   1        gx = gx + Kp*ex + exInt;
 213   1        gy = gy + Kp*ey + eyInt;
 214   1        gz = gz + Kp*ez + ezInt;
 215   1      
 216   1        q0 = q0 + (-q1*gx - q2*gy - q3*gz) * halfT;
 217   1        q1 = q1 + ( q0*gx + q2*gz - q3*gy) * halfT;
 218   1        q2 = q2 + ( q0*gy - q1*gz + q3*gx) * halfT;
 219   1        q3 = q3 + ( q0*gz + q1*gy - q2*gx) * halfT;
 220   1      
 221   1        norm = sqrt(q0*q0 + q1*q1 + q2*q2 + q3*q3);
 222   1        q0 = q0 / norm;
 223   1        q1 = q1 / norm;
 224   1        q2 = q2 / norm;
 225   1        q3 = q3 / norm;
 226   1      
 227   1        p->AngleX = asin(2*(q0*q2 - q1*q3 )) * 57.2957795f; // ¸©Ñö   »»Ëã³É¶È
 228   1        p->AngleY = asin(2*(q0*q1 + q2*q3 )) * 57.2957795f; // ºá¹ö
 229   1        p->AngleZ = atan((2*(q1*q2+q0*q3))/(q0*q0+q1*q1-q2*q2-q3*q3)) * 57.2957795f; // Æ«º½
 230   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2891    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.52.0.0   LSM6DSM                                                           08/02/2021 23:10:22 PAGE 5   

   XDATA SIZE       =   ----      29
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =     28      48
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
