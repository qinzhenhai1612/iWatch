C51 COMPILER V9.52.0.0   PCF8563                                                           07/19/2021 23:10:40 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE PCF8563
OBJECT MODULE PLACED IN ..\Objects\PCF8563.obj
COMPILER INVOKED BY: E:\install_files\keil\C51\BIN\C51.EXE ..\User\Rtc\PCF8563.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.
                    -.\User\oled;..\User\rtc;..\User\System;..\User;..\User\bluetooth;..\User\radio;..\User\sensor) DEBUG OBJECTEXTEND PRINT(
                    -..\Listings\PCF8563.lst) TABS(2) OBJECT(..\Objects\PCF8563.obj)

line level    source

   1          #include "IIC.h"
   2          #include "PCF8563.h"
   3          
   4          /**
   5            * @brief   使用IIC总线往PCF8563的寄存器中写一字节数据
   6            * @param   addr:寄存器的地址  
   7            * @param   dat: 待写入的地址
   8            * @retval  none
   9            */
  10            void PCF8563WriteByte(unsigned char addr,unsigned char dat)
  11            {
  12   1          Single_WriteIIC(PCF8563_IIC_ADDR,addr,dat);
  13   1        }
  14            /**
  15            * @brief  使用IIC总线从PCF8563的寄存器中读一字节数据
  16            * @param  addr: 寄存器的地址
  17            * @retval 读出的一字节数据
  18            */
  19            unsigned char PCF8563ReadByte(unsigned char addr)
  20            {
  21   1          unsigned char temp;
  22   1          temp = Single_ReadIIC(PCF8563_IIC_ADDR,addr);
  23   1          return temp;
  24   1        }
  25            /**
  26              * @brief  置位或者清除PCF8563寄存器中的指定位
  27              * @param  addr: 寄存器地址
  28                        bit_mask: 指定位
  29                        SC: 0 清除；1 置位
  30              * @retval 无
  31              */
  32            void  PCF8563SetRegisterBits(unsigned char addr,unsigned char bit_mask,unsigned char SC)
  33            {
  34   1          unsigned char temp;
  35   1          temp = PCF8563ReadByte(addr);
  36   1          if(SC == 1)
  37   1            temp |= bit_mask;
  38   1          else if(SC == 0)
  39   1            temp &= ~bit_mask;
  40   1          PCF8563WriteByte(addr,temp);
  41   1        }
  42            /**
  43            * @brief  读取PCF8563中的时间并存在时间结构体中
  44            * @param  t：pcf8563_time型结构体的指针
  45            * @retval None
  46            */
  47            void PCF8563ReadTime(struct pcf8563_time *t)
  48          {
  49   1        unsigned char buf[7];
  50   1        I2C_Read_MultiBytes(PCF8563_IIC_ADDR, VL_SECONDS, 7, buf);
  51   1        buf[0] &= 0x7f;
  52   1        t->second = (buf[0] >> 4) * 10 + (buf[0] & 0x0f);
  53   1        buf[1] &= 0x7f;
C51 COMPILER V9.52.0.0   PCF8563                                                           07/19/2021 23:10:40 PAGE 2   

  54   1        t->minute = (buf[1] >> 4) * 10 + (buf[1] & 0x0f);
  55   1        buf[2] &= 0x3f;
  56   1        t->hour   = (buf[2] >> 4) * 10 + (buf[2] & 0x0f);
  57   1        buf[3] &= 0x3f;
  58   1        t->day    = (buf[3] >> 4) * 10 + (buf[3] & 0x0f);
  59   1        buf[4] &= 0x07;
  60   1        if(buf[4] == 0)
  61   1          buf[4] = 7;
  62   1        t->weekday = buf[4];
  63   1        if(buf[5] & 0x80 == 0x80)
  64   1          t->century += 1;
  65   1        buf[5] &= 0x1f;
  66   1        t->month = (buf[5] >> 4) * 10 + (buf[5] & 0x0f);
  67   1        t->year = (unsigned int)buf[6] + 2000;
  68   1      }
  69          /**
  70            * @brief  设置时间，输入十进制时间参数
  71            *         例：PCF8563WriteTime(23, 59, 50); 设定时间为12：59：50
  72            * @param  hour,min,sec：小时，分钟，秒钟
  73            * @retval None
  74            */
  75          void PCF8563WriteTime(unsigned char hour, unsigned char min, unsigned char sec)
  76          {
  77   1        PCF8563WriteByte(VL_SECONDS, ((sec / 10) << 4) | (sec % 10));
  78   1        PCF8563WriteByte(MINUTES, ((min / 10) << 4) | (min % 10));
  79   1        PCF8563WriteByte(HOURS, ((hour / 10) << 4) | (hour % 10));
  80   1      }
  81          /**
  82            * @brief  设置日期，输入十进制日期参数
  83            *         例：PCF8563WriteDate(2020, 3, 3, 1);
  84            *         设定日期为2020年3月3日周一
  85            * @param  year,month,day,weekday：年，月，日，星期(周一至周七对应1~7)
  86            * @retval None
  87            */
  88          void PCF8563WriteDate(unsigned int year, unsigned char month, unsigned char day, unsigned char weekday)
  89          {
  90   1        year -= 2000;
  91   1        PCF8563WriteByte(YEARS, (unsigned char)year);
  92   1        PCF8563WriteByte(CENTURY_MOUTHS, ((month / 10) << 4) | (month % 10));
  93   1        PCF8563WriteByte(DAYS, ((day / 10) << 4) | (day % 10));
  94   1        if(weekday == 7)
  95   1          weekday = 0;
  96   1        PCF8563WriteByte(WEEKDAYS, weekday);
  97   1      }
  98          /**
  99            * @brief  设置闹钟
 100            * @param  hour,min：小时，分钟
 101            *         day,weekday：日，星期(周一至周七对应1~7)
 102            *         mode：闹钟的模式
 103            *           ALARM_DISABLE       关闭闹钟
 104            *           ALARM_ONCE          单次有效
 105            *           ALARM_EVERYDAY      每天都响
 106            *           ALARM_WORKDAY       工作日响
 107            *           ALARM_SPECIFIC_DAY  指定某一天响
 108            * @retval None
 109            */
 110          void PCF8563SetAlarm(unsigned char hour, unsigned char min, unsigned char weekday, unsigned char day, unsi
             -gned char mode)
 111          {
 112   1        unsigned char temp1 = 0;
 113   1        unsigned char temp2 = 0;
 114   1        unsigned char temp3 = 0;
C51 COMPILER V9.52.0.0   PCF8563                                                           07/19/2021 23:10:40 PAGE 3   

 115   1        unsigned char temp4 = 0;
 116   1        temp1 = 0x80 | ((hour / 10) << 4) | (hour % 10);
 117   1        temp2 = 0x80 | ((min / 10) << 4) | (min % 10);
 118   1        temp3 = 0x80 | weekday;
 119   1        temp4 = 0x80 | ((day / 10) << 4) | (day % 10);
 120   1        if(mode == ALARM_EVERYDAY || mode == ALARM_ONCE)
 121   1        {
 122   2          temp1 &= ~0x80;
 123   2          temp2 &= ~0x80;
 124   2        }
 125   1        else if(mode == ALARM_WORKDAY)
 126   1        {
 127   2          temp1 &= ~0x80;
 128   2          temp2 &= ~0x80;
 129   2          temp3 &= ~0x80;
 130   2        }
 131   1        else if(mode == ALARM_SPECIFIC_DAY)
 132   1        {
 133   2          temp1 &= ~0x80;
 134   2          temp2 &= ~0x80;
 135   2          temp4 &= ~0x80;
 136   2        }
 137   1        PCF8563WriteByte(HOUR_ALARM, temp1);
 138   1        PCF8563WriteByte(MINUTE_ALARM, temp2);
 139   1        PCF8563WriteByte(WEEKDAY_ALARM, temp3);
 140   1        PCF8563WriteByte(DAY_ALARM, temp4);
 141   1        PCF8563SetRegisterBits(CONTROL_STATUS_2, 0x02, 1);  //使能时钟中断输出
 142   1      }
 143          /**
 144            * @brief  清除PCF8563内部闹钟标志位
 145            *         闹钟中断产生后，必须清除标志位后下一次才能正常工作
 146            * @param  无
 147            * @retval 无
 148            */
 149          void PCF8563ClearAlarmFlag(void)
 150          {
 151   1        PCF8563SetRegisterBits(CONTROL_STATUS_2, 0x08, 0);
 152   1      }
 153          /**
 154            * @brief  关闭闹钟
 155            * @param  无
 156            * @retval 无
 157            */
 158          void PCF8563DisableAlarm(void)
 159          {
 160   1        PCF8563SetRegisterBits(HOUR_ALARM, 0x80, 1);
 161   1        PCF8563SetRegisterBits(MINUTE_ALARM, 0x80, 1);
 162   1        PCF8563SetRegisterBits(WEEKDAY_ALARM, 0x80, 1);
 163   1        PCF8563SetRegisterBits(DAY_ALARM, 0x80, 1);
 164   1        PCF8563SetRegisterBits(CONTROL_STATUS_2, 0x08, 0);
 165   1      }
 166          /**
 167            * @brief  使能PCF8563内部计时器，并打开中断
 168            * @param  clock_fq：PCF8563内部计时器的时钟源
 169            *           TIMERCLK_4096_HZ  4.096khz
 170            *           TIMERCLK_64_HZ    64hz
 171            *           TIMERCLK_1_HZ     1hz
 172            *           TIMERCLK_1_60_HZ  1/60hz
 173            *         value：倒计时的值
 174            * @retval 无
 175            */
 176          void PCF8563EnableTimer(unsigned char clock_fq, unsigned char value)
C51 COMPILER V9.52.0.0   PCF8563                                                           07/19/2021 23:10:40 PAGE 4   

 177          {
 178   1        PCF8563SetRegisterBits(TIMER_CONTROL, 0x80, 0); //关闭定时器
 179   1        PCF8563WriteByte(TIMER_CONTROL, clock_fq);      //设置定时器的时钟源
 180   1        PCF8563WriteByte(TIMER, value);                 //设置定时器的初值
 181   1        PCF8563SetRegisterBits(CONTROL_STATUS_2, 0x01, 1);  //打开中断输出
 182   1        PCF8563SetRegisterBits(TIMER_CONTROL, 0x80, 1);     //打开定时器
 183   1      }
 184          /**
 185            * @brief  清除PCF8563内部计时器标志位
 186            *         倒计时计时器中断产生后，必须清除标志位后下一次才能正常工作
 187            * @param  无
 188            * @retval 无
 189            */
 190          void PCF8563ClearTimerFlag(void)
 191          {
 192   1        PCF8563SetRegisterBits(CONTROL_STATUS_2, 0x04, 0);
 193   1      }
 194          /**
 195            * @brief  关闭PCF8563内部计时器
 196            * @param  无
 197            * @retval 无
 198            */
 199          void PCF8563DisableTimer(void)
 200          {
 201   1        PCF8563SetRegisterBits(CONTROL_STATUS_2, 0x01, 0);  //关闭中断输出
 202   1        PCF8563SetRegisterBits(TIMER_CONTROL, 0x80, 0);     //关闭定时器
 203   1      }
 204          /**
 205            * @brief  读PCF8563中断源
 206            * @param  无
 207            * @retval temp：PCF8563内部状态寄存器的值
 208            */
 209          unsigned char PCF8563ReadIntSrc(void)
 210          {
 211   1        unsigned char temp;
 212   1        temp = PCF8563ReadByte(CONTROL_STATUS_2);
 213   1        temp &= 0x0c;
 214   1        return temp;
 215   1      }
 216          /**
 217            * @brief  使能PCF8563的时钟输出
 218            * @param  clock_fq：输出的时钟频率
 219            *             CLKOUT_32768_HZ   32.768khz
 220            *             CLKOUT_1024_HZ    1.924khz
 221            *             CLKOUT_32_HZ      32hz
 222            *             CLKOUT_1_HZ       1hz
 223            *         en：ENABLE_CLKOUT     使能时钟输出
 224            *             DISABLE_CLKOUT    禁止时钟输出
 225            * @retval 无
 226            */
 227          void PCF8563EnableClockOuput(unsigned char clock_fq, unsigned char en)
 228          {
 229   1        PCF8563WriteByte(CLKOUT_CONTROL, (en << 7) | clock_fq);
 230   1      }
 231          void PCF8563Init(void)
 232          {
 233   1      //  PCF8563ClearAlarmFlag();
 234   1      //  PCF8563ClearTimerFlag();
 235   1      //  PCF8563EnableTimer(TIMERCLK_1_60_HZ, 1);
 236   1        //PCF8563DisableTimer();
 237   1        PCF8563EnableClockOuput(CLKOUT_1024_HZ, DISABLE_CLKOUT);
 238   1      }
C51 COMPILER V9.52.0.0   PCF8563                                                           07/19/2021 23:10:40 PAGE 5   

 239            
 240            
 241            
 242            
 243            
 244            
 245            
 246            
 247            
 248            
 249            
 250            
 251            
 252          
 253          
 254          
 255          
 256          
 257          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    881    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      30
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
